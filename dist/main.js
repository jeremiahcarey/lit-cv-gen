/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={162:function(e,t,i){var n,s;void 0===(s="function"==typeof(n=function(){"use strict";function t(e,t,i){var n=new XMLHttpRequest;n.open("GET",e),n.responseType="blob",n.onload=function(){a(n.response,t,i)},n.onerror=function(){console.error("could not download file")},n.send()}function n(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function s(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(i){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof i.g&&i.g.global===i.g?i.g:void 0,r=o.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),a=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype&&!r?function(e,i,r){var a=o.URL||o.webkitURL,l=document.createElement("a");i=i||e.name||"download",l.download=i,l.rel="noopener","string"==typeof e?(l.href=e,l.origin===location.origin?s(l):n(l.href)?t(e,i,r):s(l,l.target="_blank")):(l.href=a.createObjectURL(e),setTimeout((function(){a.revokeObjectURL(l.href)}),4e4),setTimeout((function(){s(l)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,i,o){if(i=i||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}(e,o),i);else if(n(e))t(e,i,o);else{var r=document.createElement("a");r.href=e,r.target="_blank",setTimeout((function(){s(r)}))}}:function(e,i,n,s){if((s=s||open("","_blank"))&&(s.document.title=s.document.body.innerText="downloading..."),"string"==typeof e)return t(e,i,n);var a="application/octet-stream"===e.type,l=/constructor/i.test(o.HTMLElement)||o.safari,c=/CriOS\/[\d]+/.test(navigator.userAgent);if((c||a&&l||r)&&"undefined"!=typeof FileReader){var d=new FileReader;d.onloadend=function(){var e=d.result;e=c?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),s?s.location.href=e:location=e,s=null},d.readAsDataURL(e)}else{var u=o.URL||o.webkitURL,p=u.createObjectURL(e);s?s.location=p:location.href=p,s=null,setTimeout((function(){u.revokeObjectURL(p)}),4e4)}});o.saveAs=a.saveAs=a,e.exports=a})?n.apply(t,[]):n)||(e.exports=s)}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,i),o.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";const e=window,t=e.ShadowRoot&&(void 0===e.ShadyCSS||e.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,n=Symbol(),s=new WeakMap;class o{constructor(e,t,i){if(this._$cssResult$=!0,i!==n)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const i=this.t;if(t&&void 0===e){const t=void 0!==i&&1===i.length;t&&(e=s.get(i)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),t&&s.set(i,e))}return e}toString(){return this.cssText}}const r=(e,...t)=>{const i=1===e.length?e[0]:t.reduce(((t,i,n)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+e[n+1]),e[0]);return new o(i,e,n)},a=t?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const i of e.cssRules)t+=i.cssText;return(e=>new o("string"==typeof e?e:e+"",void 0,n))(t)})(e):e;var l;const c=window,d=c.trustedTypes,u=d?d.emptyScript:"",p=c.reactiveElementPolyfillSupport,h={toAttribute(e,t){switch(t){case Boolean:e=e?u:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let i=e;switch(t){case Boolean:i=null!==e;break;case Number:i=null===e?null:Number(e);break;case Object:case Array:try{i=JSON.parse(e)}catch(e){i=null}}return i}},m=(e,t)=>t!==e&&(t==t||e==e),v={attribute:!0,type:String,converter:h,reflect:!1,hasChanged:m},f="finalized";class g extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,i)=>{const n=this._$Ep(i,t);void 0!==n&&(this._$Ev.set(n,i),e.push(n))})),e}static createProperty(e,t=v){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const i="symbol"==typeof e?Symbol():"__"+e,n=this.getPropertyDescriptor(e,i,t);void 0!==n&&Object.defineProperty(this.prototype,e,n)}}static getPropertyDescriptor(e,t,i){return{get(){return this[t]},set(n){const s=this[e];this[t]=n,this.requestUpdate(e,s,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||v}static finalize(){if(this.hasOwnProperty(f))return!1;this[f]=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const i of t)this.createProperty(i,e[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const i=new Set(e.flat(1/0).reverse());for(const e of i)t.unshift(a(e))}else void 0!==e&&t.push(a(e));return t}static _$Ep(e,t){const i=t.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof e?e.toLowerCase():void 0}u(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,i;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(i=e.hostConnected)||void 0===i||i.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var i;const n=null!==(i=this.shadowRoot)&&void 0!==i?i:this.attachShadow(this.constructor.shadowRootOptions);return((i,n)=>{t?i.adoptedStyleSheets=n.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):n.forEach((t=>{const n=document.createElement("style"),s=e.litNonce;void 0!==s&&n.setAttribute("nonce",s),n.textContent=t.cssText,i.appendChild(n)}))})(n,this.constructor.elementStyles),n}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,i){this._$AK(e,i)}_$EO(e,t,i=v){var n;const s=this.constructor._$Ep(e,i);if(void 0!==s&&!0===i.reflect){const o=(void 0!==(null===(n=i.converter)||void 0===n?void 0:n.toAttribute)?i.converter:h).toAttribute(t,i.type);this._$El=e,null==o?this.removeAttribute(s):this.setAttribute(s,o),this._$El=null}}_$AK(e,t){var i;const n=this.constructor,s=n._$Ev.get(e);if(void 0!==s&&this._$El!==s){const e=n.getPropertyOptions(s),o="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(i=e.converter)||void 0===i?void 0:i.fromAttribute)?e.converter:h;this._$El=s,this[s]=o.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,i){let n=!0;void 0!==e&&(((i=i||this.constructor.getPropertyOptions(e)).hasChanged||m)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===i.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,i))):n=!1),!this.isUpdatePending&&n&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const i=this._$AL;try{t=this.shouldUpdate(i),t?(this.willUpdate(i),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(i)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(i)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}var b;g[f]=!0,g.elementProperties=new Map,g.elementStyles=[],g.shadowRootOptions={mode:"open"},null==p||p({ReactiveElement:g}),(null!==(l=c.reactiveElementVersions)&&void 0!==l?l:c.reactiveElementVersions=[]).push("1.6.2");const y=window,$=y.trustedTypes,x=$?$.createPolicy("lit-html",{createHTML:e=>e}):void 0,w="$lit$",A=`lit$${(Math.random()+"").slice(9)}$`,E="?"+A,_=`<${E}>`,S=document,C=()=>S.createComment(""),k=e=>null===e||"object"!=typeof e&&"function"!=typeof e,U=Array.isArray,P="[ \t\n\f\r]",R=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,O=/-->/g,D=/>/g,T=RegExp(`>|${P}(?:([^\\s"'>=/]+)(${P}*=${P}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),j=/'/g,L=/"/g,N=/^(?:script|style|textarea|title)$/i,H=e=>(t,...i)=>({_$litType$:e,strings:t,values:i}),M=H(1),I=(H(2),Symbol.for("lit-noChange")),z=Symbol.for("lit-nothing"),q=new WeakMap,B=S.createTreeWalker(S,129,null,!1),V=(e,t)=>{const i=e.length-1,n=[];let s,o=2===t?"<svg>":"",r=R;for(let t=0;t<i;t++){const i=e[t];let a,l,c=-1,d=0;for(;d<i.length&&(r.lastIndex=d,l=r.exec(i),null!==l);)d=r.lastIndex,r===R?"!--"===l[1]?r=O:void 0!==l[1]?r=D:void 0!==l[2]?(N.test(l[2])&&(s=RegExp("</"+l[2],"g")),r=T):void 0!==l[3]&&(r=T):r===T?">"===l[0]?(r=null!=s?s:R,c=-1):void 0===l[1]?c=-2:(c=r.lastIndex-l[2].length,a=l[1],r=void 0===l[3]?T:'"'===l[3]?L:j):r===L||r===j?r=T:r===O||r===D?r=R:(r=T,s=void 0);const u=r===T&&e[t+1].startsWith("/>")?" ":"";o+=r===R?i+_:c>=0?(n.push(a),i.slice(0,c)+w+i.slice(c)+A+u):i+A+(-2===c?(n.push(void 0),t):u)}const a=o+(e[i]||"<?>")+(2===t?"</svg>":"");if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==x?x.createHTML(a):a,n]};class F{constructor({strings:e,_$litType$:t},i){let n;this.parts=[];let s=0,o=0;const r=e.length-1,a=this.parts,[l,c]=V(e,t);if(this.el=F.createElement(l,i),B.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(n=B.nextNode())&&a.length<r;){if(1===n.nodeType){if(n.hasAttributes()){const e=[];for(const t of n.getAttributeNames())if(t.endsWith(w)||t.startsWith(A)){const i=c[o++];if(e.push(t),void 0!==i){const e=n.getAttribute(i.toLowerCase()+w).split(A),t=/([.?@])?(.*)/.exec(i);a.push({type:1,index:s,name:t[2],strings:e,ctor:"."===t[1]?K:"?"===t[1]?Z:"@"===t[1]?Y:X})}else a.push({type:6,index:s})}for(const t of e)n.removeAttribute(t)}if(N.test(n.tagName)){const e=n.textContent.split(A),t=e.length-1;if(t>0){n.textContent=$?$.emptyScript:"";for(let i=0;i<t;i++)n.append(e[i],C()),B.nextNode(),a.push({type:2,index:++s});n.append(e[t],C())}}}else if(8===n.nodeType)if(n.data===E)a.push({type:2,index:s});else{let e=-1;for(;-1!==(e=n.data.indexOf(A,e+1));)a.push({type:7,index:s}),e+=A.length-1}s++}}static createElement(e,t){const i=S.createElement("template");return i.innerHTML=e,i}}function W(e,t,i=e,n){var s,o,r,a;if(t===I)return t;let l=void 0!==n?null===(s=i._$Co)||void 0===s?void 0:s[n]:i._$Cl;const c=k(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(o=null==l?void 0:l._$AO)||void 0===o||o.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,i,n)),void 0!==n?(null!==(r=(a=i)._$Co)&&void 0!==r?r:a._$Co=[])[n]=l:i._$Cl=l),void 0!==l&&(t=W(e,l._$AS(e,t.values),l,n)),t}class J{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:i},parts:n}=this._$AD,s=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:S).importNode(i,!0);B.currentNode=s;let o=B.nextNode(),r=0,a=0,l=n[0];for(;void 0!==l;){if(r===l.index){let t;2===l.type?t=new G(o,o.nextSibling,this,e):1===l.type?t=new l.ctor(o,l.name,l.strings,this,e):6===l.type&&(t=new ee(o,this,e)),this._$AV.push(t),l=n[++a]}r!==(null==l?void 0:l.index)&&(o=B.nextNode(),r++)}return B.currentNode=S,s}v(e){let t=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(e,i,t),t+=i.strings.length-2):i._$AI(e[t])),t++}}class G{constructor(e,t,i,n){var s;this.type=2,this._$AH=z,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=i,this.options=n,this._$Cp=null===(s=null==n?void 0:n.isConnected)||void 0===s||s}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cp}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=W(this,e,t),k(e)?e===z||null==e||""===e?(this._$AH!==z&&this._$AR(),this._$AH=z):e!==this._$AH&&e!==I&&this._(e):void 0!==e._$litType$?this.g(e):void 0!==e.nodeType?this.$(e):(e=>U(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]))(e)?this.T(e):this._(e)}k(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}$(e){this._$AH!==e&&(this._$AR(),this._$AH=this.k(e))}_(e){this._$AH!==z&&k(this._$AH)?this._$AA.nextSibling.data=e:this.$(S.createTextNode(e)),this._$AH=e}g(e){var t;const{values:i,_$litType$:n}=e,s="number"==typeof n?this._$AC(e):(void 0===n.el&&(n.el=F.createElement(n.h,this.options)),n);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===s)this._$AH.v(i);else{const e=new J(s,this),t=e.u(this.options);e.v(i),this.$(t),this._$AH=e}}_$AC(e){let t=q.get(e.strings);return void 0===t&&q.set(e.strings,t=new F(e)),t}T(e){U(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let i,n=0;for(const s of e)n===t.length?t.push(i=new G(this.k(C()),this.k(C()),this,this.options)):i=t[n],i._$AI(s),n++;n<t.length&&(this._$AR(i&&i._$AB.nextSibling,n),t.length=n)}_$AR(e=this._$AA.nextSibling,t){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cp=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class X{constructor(e,t,i,n,s){this.type=1,this._$AH=z,this._$AN=void 0,this.element=e,this.name=t,this._$AM=n,this.options=s,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=z}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,i,n){const s=this.strings;let o=!1;if(void 0===s)e=W(this,e,t,0),o=!k(e)||e!==this._$AH&&e!==I,o&&(this._$AH=e);else{const n=e;let r,a;for(e=s[0],r=0;r<s.length-1;r++)a=W(this,n[i+r],t,r),a===I&&(a=this._$AH[r]),o||(o=!k(a)||a!==this._$AH[r]),a===z?e=z:e!==z&&(e+=(null!=a?a:"")+s[r+1]),this._$AH[r]=a}o&&!n&&this.j(e)}j(e){e===z?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class K extends X{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===z?void 0:e}}const Q=$?$.emptyScript:"";class Z extends X{constructor(){super(...arguments),this.type=4}j(e){e&&e!==z?this.element.setAttribute(this.name,Q):this.element.removeAttribute(this.name)}}class Y extends X{constructor(e,t,i,n,s){super(e,t,i,n,s),this.type=5}_$AI(e,t=this){var i;if((e=null!==(i=W(this,e,t,0))&&void 0!==i?i:z)===I)return;const n=this._$AH,s=e===z&&n!==z||e.capture!==n.capture||e.once!==n.once||e.passive!==n.passive,o=e!==z&&(n===z||s);s&&this.element.removeEventListener(this.name,this,n),o&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==i?i:this.element,e):this._$AH.handleEvent(e)}}class ee{constructor(e,t,i){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(e){W(this,e)}}const te=y.litHtmlPolyfillSupport;var ie,ne;null==te||te(F,G),(null!==(b=y.litHtmlVersions)&&void 0!==b?b:y.litHtmlVersions=[]).push("2.7.4");class se extends g{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const i=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=i.firstChild),i}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=((e,t,i)=>{var n,s;const o=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:t;let r=o._$litPart$;if(void 0===r){const e=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:null;o._$litPart$=r=new G(t.insertBefore(C(),e),e,void 0,null!=i?i:{})}return r._$AI(e),r})(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return I}}se.finalized=!0,se._$litElement$=!0,null===(ie=globalThis.litElementHydrateSupport)||void 0===ie||ie.call(globalThis,{LitElement:se});const oe=globalThis.litElementPolyfillSupport;null==oe||oe({LitElement:se}),(null!==(ne=globalThis.litElementVersions)&&void 0!==ne?ne:globalThis.litElementVersions=[]).push("3.3.2");class re extends se{static styles=r`
    .collapsible-label {
      background-color: black;
      color: white;
      cursor: pointer;
      padding: 0.5rem;
      width: 100%;
      border: none;
      text-align: left;
      outline: none;
      font-size: 1.2rem;
    }
    .collapsible-label:hover {
      background-color: #2f2f2f;
    }
    .collapsible-label:after {
      content: "+";
      font-size: 20px;
      color: white;
      float: right;
      margin-left: 5px;
    }
    .active:after {
      content: "-";
    }
    .content {
      padding: 0;
      opacity: 0;
      max-height: 0;
      overflow: auto;
      transition: ease 0.25s;
    }
    .expanded {
      opacity: 1;
      max-height: 300px;
      padding: 1rem;
    }
  `;static properties={topLabel:{attribute:"top-label"},expanded:{type:Boolean}};constructor(){super(),this.topLabel="Collapsible Label",this.expanded=!1}render(){return M`
      <button
        type="button"
        class="collapsible-label ${this.expanded?"active":""}"
        @click=${this.setExpanded}
      >
        ${this.topLabel}
      </button>
      <div class="content ${this.expanded?"expanded":""}">
        <slot></slot>
      </div>
    `}setExpanded(){this.expanded=!this.expanded}}customElements.define("collapsible-div",re);const ae=r`
  .form-container {
    margin: 0;
    padding: 0;
  }

  .job-header,
  .ed-header {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .job-header h1,
  .ed-header h1 {
    font-size: 1.3rem;
  }

  collapsible-div button {
    font-size: 0.8rem;
    padding: 0.3rem;
    border: 2px solid black;
    border-radius: 8px;
    background-color: white;
    cursor: pointer;
  }

  collapsible-div button:hover {
    box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
  }

  collapsible-div button:active {
    box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
      rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  textarea {
    font-family: inherit;
    font-size: 0.9rem;
  }

  .input-group input {
    padding: 0.5rem;
    width: 15rem;
    min-width: 75%;
    border: 1px solid rgb(218, 209, 209);
    border-radius: 0.33em;
  }

  .input-group textarea {
    padding: 0.5rem;
    border: 1px solid rgb(218, 209, 209);
    width: 15rem;
    min-width: 75%;
    height: 5rem;
    border-radius: 0.33em;
    resize: none;
  }

  .input-el {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }
`;class le extends se{static properties={resData:{type:Object},experience:{type:Array}};static styles=[ae,r`
      button {
        font-size: 0.8rem;
        padding: 0.3rem;
        border: 2px solid black;
        border-radius: 8px;
        background-color: white;
        cursor: pointer;
      }

      button:hover {
        box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
      }

      button:active {
        box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
          rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
      }
    `];connectedCallback(){super.connectedCallback(),this.experience=[...this.resData.experience]}constructor(){super()}render(){return M`
      ${this.resData.experience.map(((e,t)=>M`
          <div class="experience-group">
            <div class="job-header">
              <h1>Job #${t+1}</h1>
              ${this.experience.length>1?M`<button
                    type="button"
                    class="download-btn"
                    @click=${()=>this.deleteJob(t)}
                  >
                    Delete Job
                  </button>`:z}
            </div>
            <div class="input-group">
              <label
                >Dates:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${e.dates}"
                    @input=${e=>{const i=t,n=e.target.value;this.sendUpdateArrayOfObjects(i,"dates",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >Role:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${e.role}"
                    @input=${e=>{const i=t,n=e.target.value;this.sendUpdateArrayOfObjects(i,"role",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >Company:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${e.company}"
                    @input=${e=>{const i=t,n=e.target.value;this.sendUpdateArrayOfObjects(i,"company",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >Summary:
                <p class="input-el">
                  <textarea
                    .value=${e.description}
                    @input=${e=>{const i=t,n=e.target.value;this.sendUpdateArrayOfObjects(i,"description",n)}}
                  ></textarea>
                </p>
              </label>
            </div>
            ${t+1==this.experience.length?M`<button
                  type="button"
                  class="add-ed-btn"
                  @click=${this.addJob}
                >
                  Add Experience
                </button>`:z}
          </div>
        `))}
    `}deleteJob(e){console.log(e);let t=structuredClone(this.experience);t.splice(e,1),this.experience=[...t];const i=new CustomEvent("data-updated",{detail:{key:"experience",value:this.experience},bubbles:!0,composed:!0});this.dispatchEvent(i)}addJob(){let e;e=structuredClone(this.experience),e[this.experience.length]={dates:"",role:"",company:"",description:""},this.experience=[...e];const t=new CustomEvent("data-updated",{detail:{key:"experience",value:this.experience},bubbles:!0,composed:!0});this.dispatchEvent(t)}sendUpdateArrayOfObjects(e,t,i){let n;n=structuredClone(this.experience),n[e][t]=i,this.experience=[...n];const s=new CustomEvent("data-updated",{detail:{key:"experience",value:this.experience},bubbles:!0,composed:!0});this.dispatchEvent(s)}}customElements.define("experience-manager",le);class ce extends se{static properties={resData:{type:Object},education:{type:Array}};static styles=[ae,r`
      button {
        font-size: 0.8rem;
        padding: 0.3rem;
        border: 2px solid black;
        border-radius: 8px;
        background-color: white;
        cursor: pointer;
      }

      button:hover {
        box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
      }

      button:active {
        box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
          rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
      }
    `];connectedCallback(){super.connectedCallback(),this.education=[...this.resData.education]}constructor(){super()}render(){return M`
      ${this.resData.education.map(((e,t)=>M`
          <div class="education-group">
            <div class="ed-header">
              <h1>Education #${t+1}</h1>
              ${this.education.length>1?M`<button
                    type="button"
                    @click=${()=>this.deleteEd(t)}
                  >
                    Delete Education
                  </button>`:z}
            </div>
            <div class="input-group">
              <label
                >Date Finished:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${e.dateFinished}"
                    @input=${e=>{const i=t,n=e.target.value;this.sendUpdateArrayOfObjects(i,"dateFinished",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >Degree/Major:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${e.degree}"
                    @input=${e=>{const i=t,n=e.target.value;this.sendUpdateArrayOfObjects(i,"degree",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >School:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${e.school}"
                    @input=${e=>{const i=t,n=e.target.value;this.sendUpdateArrayOfObjects(i,"school",n)}}
                  />
                </p>
              </label>
            </div>
            ${t+1==this.resData.education.length?M`<button
                  type="button"
                  class="add-ed-btn"
                  @click=${this.addEd}
                >
                  Add Education
                </button>`:z}
          </div>
        `))}
    `}deleteEd(e){console.log(e);let t=structuredClone(this.education);t.splice(e,1),this.education=[...t];const i=new CustomEvent("data-updated",{detail:{key:"education",value:this.education},bubbles:!0,composed:!0});this.dispatchEvent(i)}addEd(){let e;e=structuredClone(this.education),e[this.education.length]={dateFinished:"",degree:"",school:""},this.education=[...e];const t=new CustomEvent("data-updated",{detail:{key:"education",value:this.education},bubbles:!0,composed:!0});this.dispatchEvent(t)}sendUpdateArrayOfObjects(e,t,i){let n;n=structuredClone(this.education),n[e][t]=i,this.education=[...n];const s=new CustomEvent("data-updated",{detail:{key:"education",value:this.education},bubbles:!0,composed:!0});this.dispatchEvent(s)}}customElements.define("education-manager",ce);class de extends se{static properties={resData:{type:Object},conactInfo:{type:Object}};static styles=[ae,r``];connectedCallback(){super.connectedCallback(),this.contactInfo={...this.resData.contact}}constructor(){super()}render(){return M`
      <div class="input-group">
        <label>
          Email:
          <p class="input-el">
            <input
              type="text"
              .value="${this.resData.contact.email}"
              @input=${e=>{const t=e.target.value;this.sendUpdateContact("email",t)}}
            />
          </p>
        </label>
      </div>
      <div class="input-group">
        <label
          >Phone:
          <p class="input-el">
            <input
              type="text"
              .value="${this.resData.contact.phone}"
              @input=${e=>{const t=e.target.value;this.sendUpdateContact("phone",t)}}
            />
          </p>
        </label>
      </div>
      <div class="input-group">
        <label
          >Website:
          <p class="input-el">
            <input
              type="text"
              .value="${this.resData.contact.site}"
              @input=${e=>{const t=e.target.value;this.sendUpdateContact("site",t)}}
            />
          </p>
        </label>
      </div>
      <div class="input-group">
        <label
          >City:
          <p class="input-el">
            <input
              type="text"
              .value="${this.resData.contact.city}"
              @input=${e=>{const t=e.target.value;this.sendUpdateContact("city",t)}}
            />
          </p>
        </label>
      </div>
    `}sendUpdateContact(e,t){let i;i=structuredClone(this.contactInfo),i[e]=t,this.contactInfo={...i};const n=new CustomEvent("data-updated",{detail:{key:"contact",value:this.contactInfo},bubbles:!0,composed:!0});this.dispatchEvent(n)}}customElements.define("contact-manager",de);class ue extends se{static properties={resData:{type:Object},experience:{type:Array},education:{type:Array},skills:{type:Array},contactInfo:{type:Object}};static styles=[ae,r``];constructor(){super()}connectedCallback(){super.connectedCallback(),this.skills=[...this.resData.skills]}render(){return M`
      <div class="form-container">
        <collapsible-div top-label="Title/Role">
          <div class="input-group">
            <label
              >Job Title:
              <p class="input-el">
                <input
                  type="text"
                  .value="${this.resData.role}"
                  @input=${e=>{const t=e.target.value;this.sendUpdateSimple("role",t)}}
                />
              </p>
            </label>
          </div> </collapsible-div
        ><collapsible-div top-label="Name">
          <div class="input-group">
            <label
              >Name:
              <p class="input-el">
                <input
                  type="text"
                  .value="${this.resData.name}"
                  @input=${e=>{const t=e.target.value;this.sendUpdateSimple("name",t)}}
                />
              </p>
            </label>
          </div>
        </collapsible-div>
        <collapsible-div top-label="Contact Info">
        <contact-manager .resData=${this.resData}></contact-manager>
        </div>
        </collapsible-div>
        <collapsible-div top-label="Personal Summary">
          <div class="input-group">
            <label
              >Summary:
              <p class="input-el">
                <textarea
                  .value=${this.resData.summary}
                  @input=${e=>{const t=e.target.value;this.sendUpdateSimple("summary",t)}}
                ></textarea>
              </p>
            </label>
          </div>
        </collapsible-div>
        <collapsible-div top-label="Experience">
          <experience-manager .resData=${this.resData}></experience-manager>
        </collapsible-div>
        <collapsible-div top-label="Education">
          <education-manager .resData=${this.resData}></education-manager>
        </collapsible-div>
        <collapsible-div top-label="Skills">
          <div class="input-group">
            <label
              >Skills (type skills separated by commas):
              <p class="input-el">
                <textarea
                  @input=${e=>{const t=e.target.value.split(",").filter((e=>""!=e.trim())).map((e=>e.trim()));this.sendUpdateSimple("skills",t)}}
                >
${this.resData.skills.join()}</textarea
                >
              </p>
            </label>
          </div>
        </collapsible-div>
      </div>
    `}sendUpdateSimple(e,t){const i=new CustomEvent("data-updated",{detail:{key:e,value:t},bubbles:!0,composed:!0});this.dispatchEvent(i)}}customElements.define("cv-form",ue),i(162);const pe=(()=>{let e=0;return()=>(e+=1,`u${`0000${(Math.random()*36**4<<0).toString(36)}`.slice(-4)}${e}`)})();function he(e){const t=[];for(let i=0,n=e.length;i<n;i++)t.push(e[i]);return t}function me(e,t){const i=(e.ownerDocument.defaultView||window).getComputedStyle(e).getPropertyValue(t);return i?parseFloat(i.replace("px","")):0}function ve(e,t={}){return{width:t.width||function(e){const t=me(e,"border-left-width"),i=me(e,"border-right-width");return e.clientWidth+t+i}(e),height:t.height||function(e){const t=me(e,"border-top-width"),i=me(e,"border-bottom-width");return e.clientHeight+t+i}(e)}}const fe=16384;function ge(e){return new Promise(((t,i)=>{const n=new Image;n.decode=()=>t(n),n.onload=()=>t(n),n.onerror=i,n.crossOrigin="anonymous",n.decoding="async",n.src=e}))}const be=(e,t)=>{if(e instanceof t)return!0;const i=Object.getPrototypeOf(e);return null!==i&&(i.constructor.name===t.name||be(i,t))};function ye(e,t,i){const n=window.getComputedStyle(e,i),s=n.getPropertyValue("content");if(""===s||"none"===s)return;const o=pe();try{t.className=`${t.className} ${o}`}catch(e){return}const r=document.createElement("style");r.appendChild(function(e,t,i){const n=`.${e}:${t}`,s=i.cssText?function(e){const t=e.getPropertyValue("content");return`${e.cssText} content: '${t.replace(/'|"/g,"")}';`}(i):function(e){return he(e).map((t=>`${t}: ${e.getPropertyValue(t)}${e.getPropertyPriority(t)?" !important":""};`)).join(" ")}(i);return document.createTextNode(`${n}{${s}}`)}(o,i,n)),t.appendChild(r)}const $e="application/font-woff",xe="image/jpeg",we={woff:$e,woff2:$e,ttf:"application/font-truetype",eot:"application/vnd.ms-fontobject",png:"image/png",jpg:xe,jpeg:xe,gif:"image/gif",tiff:"image/tiff",svg:"image/svg+xml",webp:"image/webp"};function Ae(e){const t=function(e){const t=/\.([^./]*?)$/g.exec(e);return t?t[1]:""}(e).toLowerCase();return we[t]||""}function Ee(e){return-1!==e.search(/^(data:)/)}function _e(e,t){return`data:${t};base64,${e}`}async function Se(e,t,i){const n=await fetch(e,t);if(404===n.status)throw new Error(`Resource "${n.url}" not found`);const s=await n.blob();return new Promise(((e,t)=>{const o=new FileReader;o.onerror=t,o.onloadend=()=>{try{e(i({res:n,result:o.result}))}catch(e){t(e)}},o.readAsDataURL(s)}))}const Ce={};async function ke(e,t,i){const n=function(e,t,i){let n=e.replace(/\?.*/,"");return i&&(n=e),/ttf|otf|eot|woff2?/i.test(n)&&(n=n.replace(/.*\//,"")),t?`[${t}]${n}`:n}(e,t,i.includeQueryParams);if(null!=Ce[n])return Ce[n];let s;i.cacheBust&&(e+=(/\?/.test(e)?"&":"?")+(new Date).getTime());try{const n=await Se(e,i.fetchRequestInit,(({res:e,result:i})=>(t||(t=e.headers.get("Content-Type")||""),function(e){return e.split(/,/)[1]}(i))));s=_e(n,t)}catch(t){s=i.imagePlaceholder||"";let n=`Failed to fetch resource: ${e}`;t&&(n="string"==typeof t?t:t.message),n&&console.warn(n)}return Ce[n]=s,s}const Ue=e=>null!=e.tagName&&"SLOT"===e.tagName.toUpperCase();async function Pe(e,t,i){return i||!t.filter||t.filter(e)?Promise.resolve(e).then((e=>async function(e,t){return be(e,HTMLCanvasElement)?async function(e){const t=e.toDataURL();return"data:,"===t?e.cloneNode(!1):ge(t)}(e):be(e,HTMLVideoElement)?async function(e,t){if(e.currentSrc){const t=document.createElement("canvas"),i=t.getContext("2d");return t.width=e.clientWidth,t.height=e.clientHeight,null==i||i.drawImage(e,0,0,t.width,t.height),ge(t.toDataURL())}const i=e.poster,n=Ae(i);return ge(await ke(i,n,t))}(e,t):be(e,HTMLIFrameElement)?async function(e){var t;try{if(null===(t=null==e?void 0:e.contentDocument)||void 0===t?void 0:t.body)return await Pe(e.contentDocument.body,{},!0)}catch(e){}return e.cloneNode(!1)}(e):e.cloneNode(!1)}(e,t))).then((i=>async function(e,t,i){var n,s;let o=[];return o=Ue(e)&&e.assignedNodes?he(e.assignedNodes()):be(e,HTMLIFrameElement)&&(null===(n=e.contentDocument)||void 0===n?void 0:n.body)?he(e.contentDocument.body.childNodes):he((null!==(s=e.shadowRoot)&&void 0!==s?s:e).childNodes),0===o.length||be(e,HTMLVideoElement)||await o.reduce(((e,n)=>e.then((()=>Pe(n,i))).then((e=>{e&&t.appendChild(e)}))),Promise.resolve()),t}(e,i,t))).then((t=>function(e,t){return be(t,Element)&&(function(e,t){const i=t.style;if(!i)return;const n=window.getComputedStyle(e);n.cssText?(i.cssText=n.cssText,i.transformOrigin=n.transformOrigin):he(n).forEach((s=>{let o=n.getPropertyValue(s);if("font-size"===s&&o.endsWith("px")){const e=Math.floor(parseFloat(o.substring(0,o.length-2)))-.1;o=`${e}px`}be(e,HTMLIFrameElement)&&"display"===s&&"inline"===o&&(o="block"),"d"===s&&t.getAttribute("d")&&(o=`path(${t.getAttribute("d")})`),i.setProperty(s,o,n.getPropertyPriority(s))}))}(e,t),function(e,t){ye(e,t,":before"),ye(e,t,":after")}(e,t),function(e,t){be(e,HTMLTextAreaElement)&&(t.innerHTML=e.value),be(e,HTMLInputElement)&&t.setAttribute("value",e.value)}(e,t),function(e,t){if(be(e,HTMLSelectElement)){const i=t,n=Array.from(i.children).find((t=>e.value===t.getAttribute("value")));n&&n.setAttribute("selected","")}}(e,t)),t}(e,t))).then((e=>async function(e,t){const i=e.querySelectorAll?e.querySelectorAll("use"):[];if(0===i.length)return e;const n={};for(let s=0;s<i.length;s++){const o=i[s].getAttribute("xlink:href");if(o){const i=e.querySelector(o),s=document.querySelector(o);i||!s||n[o]||(n[o]=await Pe(s,t,!0))}}const s=Object.values(n);if(s.length){const t="http://www.w3.org/1999/xhtml",i=document.createElementNS(t,"svg");i.setAttribute("xmlns",t),i.style.position="absolute",i.style.width="0",i.style.height="0",i.style.overflow="hidden",i.style.display="none";const n=document.createElementNS(t,"defs");i.appendChild(n);for(let e=0;e<s.length;e++)n.appendChild(s[e]);e.appendChild(i)}return e}(e,t))):null}const Re=/url\((['"]?)([^'"]+?)\1\)/g,Oe=/url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g,De=/src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;function Te(e){return-1!==e.search(Re)}async function je(e,t,i){if(!Te(e))return e;const n=function(e,{preferredFontFormat:t}){return t?e.replace(De,(e=>{for(;;){const[i,,n]=Oe.exec(e)||[];if(!n)return"";if(n===t)return`src: ${i};`}})):e}(e,i),s=function(e){const t=[];return e.replace(Re,((e,i,n)=>(t.push(n),e))),t.filter((e=>!Ee(e)))}(n);return s.reduce(((e,n)=>e.then((e=>async function(e,t,i,n,s){try{const o=i?function(e,t){if(e.match(/^[a-z]+:\/\//i))return e;if(e.match(/^\/\//))return window.location.protocol+e;if(e.match(/^[a-z]+:/i))return e;const i=document.implementation.createHTMLDocument(),n=i.createElement("base"),s=i.createElement("a");return i.head.appendChild(n),i.body.appendChild(s),t&&(n.href=t),s.href=e,s.href}(t,i):t,r=Ae(t);let a;return a=s?_e(await s(o),r):await ke(o,r,n),e.replace(function(e){const t=e.replace(/([.*+?^${}()|\[\]\/\\])/g,"\\$1");return new RegExp(`(url\\(['"]?)(${t})(['"]?\\))`,"g")}(t),`$1${a}$3`)}catch(e){}return e}(e,n,t,i)))),Promise.resolve(n))}async function Le(e,t,i){var n;const s=null===(n=t.style)||void 0===n?void 0:n.getPropertyValue(e);if(s){const n=await je(s,null,i);return t.style.setProperty(e,n,t.style.getPropertyPriority(e)),!0}return!1}async function Ne(e,t){be(e,Element)&&(await async function(e,t){await Le("background",e,t)||await Le("background-image",e,t),await Le("mask",e,t)||await Le("mask-image",e,t)}(e,t),await async function(e,t){const i=be(e,HTMLImageElement);if((!i||Ee(e.src))&&(!be(e,SVGImageElement)||Ee(e.href.baseVal)))return;const n=i?e.src:e.href.baseVal,s=await ke(n,Ae(n),t);await new Promise(((t,n)=>{e.onload=t,e.onerror=n;const o=e;o.decode&&(o.decode=t),"lazy"===o.loading&&(o.loading="eager"),i?(e.srcset="",e.src=s):e.href.baseVal=s}))}(e,t),await async function(e,t){const i=he(e.childNodes).map((e=>Ne(e,t)));await Promise.all(i).then((()=>e))}(e,t))}const He={};async function Me(e){let t=He[e];if(null!=t)return t;const i=await fetch(e);return t={url:e,cssText:await i.text()},He[e]=t,t}async function Ie(e,t){let i=e.cssText;const n=/url\(["']?([^"')]+)["']?\)/g,s=(i.match(/url\([^)]+\)/g)||[]).map((async s=>{let o=s.replace(n,"$1");return o.startsWith("https://")||(o=new URL(o,e.url).href),Se(o,t.fetchRequestInit,(({result:e})=>(i=i.replace(s,`url(${e})`),[s,e])))}));return Promise.all(s).then((()=>i))}function ze(e){if(null==e)return[];const t=[];let i=e.replace(/(\/\*[\s\S]*?\*\/)/gi,"");const n=new RegExp("((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})","gi");for(;;){const e=n.exec(i);if(null===e)break;t.push(e[0])}i=i.replace(n,"");const s=/@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi,o=new RegExp("((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})","gi");for(;;){let e=s.exec(i);if(null===e){if(e=o.exec(i),null===e)break;s.lastIndex=o.lastIndex}else o.lastIndex=s.lastIndex;t.push(e[0])}return t}async function qe(e,t){const i=null!=t.fontEmbedCSS?t.fontEmbedCSS:t.skipFonts?null:await async function(e,t){const i=await async function(e,t){if(null==e.ownerDocument)throw new Error("Provided element is not within a Document");const i=he(e.ownerDocument.styleSheets),n=await async function(e,t){const i=[],n=[];return e.forEach((i=>{if("cssRules"in i)try{he(i.cssRules||[]).forEach(((e,s)=>{if(e.type===CSSRule.IMPORT_RULE){let o=s+1;const r=Me(e.href).then((e=>Ie(e,t))).then((e=>ze(e).forEach((e=>{try{i.insertRule(e,e.startsWith("@import")?o+=1:i.cssRules.length)}catch(t){console.error("Error inserting rule from remote css",{rule:e,error:t})}})))).catch((e=>{console.error("Error loading remote css",e.toString())}));n.push(r)}}))}catch(s){const o=e.find((e=>null==e.href))||document.styleSheets[0];null!=i.href&&n.push(Me(i.href).then((e=>Ie(e,t))).then((e=>ze(e).forEach((e=>{o.insertRule(e,i.cssRules.length)})))).catch((e=>{console.error("Error loading remote stylesheet",e)}))),console.error("Error inlining remote css file",s)}})),Promise.all(n).then((()=>(e.forEach((e=>{if("cssRules"in e)try{he(e.cssRules||[]).forEach((e=>{i.push(e)}))}catch(t){console.error(`Error while reading CSS rules from ${e.href}`,t)}})),i)))}(i,t);return function(e){return e.filter((e=>e.type===CSSRule.FONT_FACE_RULE)).filter((e=>Te(e.style.getPropertyValue("src"))))}(n)}(e,t);return(await Promise.all(i.map((e=>{const i=e.parentStyleSheet?e.parentStyleSheet.href:null;return je(e.cssText,i,t)})))).join("\n")}(e,t);if(i){const t=document.createElement("style"),n=document.createTextNode(i);t.appendChild(n),e.firstChild?e.insertBefore(t,e.firstChild):e.appendChild(t)}}async function Be(e,t={}){const{width:i,height:n}=ve(e,t),s=await Pe(e,t,!0);return await qe(s,t),await Ne(s,t),function(e,t){const{style:i}=e;t.backgroundColor&&(i.backgroundColor=t.backgroundColor),t.width&&(i.width=`${t.width}px`),t.height&&(i.height=`${t.height}px`);const n=t.style;null!=n&&Object.keys(n).forEach((e=>{i[e]=n[e]}))}(s,t),await async function(e,t,i){const n="http://www.w3.org/2000/svg",s=document.createElementNS(n,"svg"),o=document.createElementNS(n,"foreignObject");return s.setAttribute("width",`${t}`),s.setAttribute("height",`${i}`),s.setAttribute("viewBox",`0 0 ${t} ${i}`),o.setAttribute("width","100%"),o.setAttribute("height","100%"),o.setAttribute("x","0"),o.setAttribute("y","0"),o.setAttribute("externalResourcesRequired","true"),s.appendChild(o),o.appendChild(e),async function(e){return Promise.resolve().then((()=>(new XMLSerializer).serializeToString(e))).then(encodeURIComponent).then((e=>`data:image/svg+xml;charset=utf-8,${e}`))}(s)}(s,i,n)}async function Ve(e,t={}){const i=await async function(e,t={}){const{width:i,height:n}=ve(e,t),s=await Be(e,t),o=await ge(s),r=document.createElement("canvas"),a=r.getContext("2d"),l=t.pixelRatio||function(){let e,t;try{t=process}catch(e){}const i=t&&t.env?t.env.devicePixelRatio:null;return i&&(e=parseInt(i,10),Number.isNaN(e)&&(e=1)),e||window.devicePixelRatio||1}(),c=t.canvasWidth||i,d=t.canvasHeight||n;return r.width=c*l,r.height=d*l,t.skipAutoScale||function(e){(e.width>fe||e.height>fe)&&(e.width>fe&&e.height>fe?e.width>e.height?(e.height*=fe/e.width,e.width=fe):(e.width*=fe/e.height,e.height=fe):e.width>fe?(e.height*=fe/e.width,e.width=fe):(e.width*=fe/e.height,e.height=fe))}(r),r.style.width=`${c}`,r.style.height=`${d}`,t.backgroundColor&&(a.fillStyle=t.backgroundColor,a.fillRect(0,0,r.width,r.height)),a.drawImage(o,0,0,r.width,r.height),r}(e,t),n=await function(e,t={}){return e.toBlob?new Promise((i=>{e.toBlob(i,t.type?t.type:"image/png",t.quality?t.quality:1)})):new Promise((i=>{const n=window.atob(e.toDataURL(t.type?t.type:void 0,t.quality?t.quality:void 0).split(",")[1]),s=n.length,o=new Uint8Array(s);for(let e=0;e<s;e+=1)o[e]=n.charCodeAt(e);i(new Blob([o],{type:t.type?t.type:"image/png"}))}))}(i);return n}class Fe extends se{static styles=r`
    :host {
      font-family: "Mulish", sans-serif;
      box-sizing: border-box;
      background-color: white;
      position: relative;
    }

    .download-btn {
      position: absolute;
      top: -4rem;
      right: 0;
      font-size: 0.8rem;
      padding: 0.3rem;
      border: 2px solid black;
      border-radius: 8px;
      background-color: white;
      cursor: pointer;
    }

    .download-btn:hover {
      box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
    }

    .download-btn:active {
      box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
        rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
    }

    .cv-container {
      padding: 1.5rem;
      display: flex;
      justify-content: center;
      width: 700px;
      aspect-ratio: 17/22;
    }

    .left-column {
      width: 75%;
      border-right: 2px solid black;
      height: 100%;
    }

    .basic-info {
      border-bottom: 2px solid black;
      padding: 1.25rem;
    }

    .right-column {
      width: 25%;
      padding: 1.25rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      font-size: 0.8rem;
    }

    .main-cat {
      font-weight: bold;
      font-size: 0.7rem;
      text-transform: uppercase;
      border: 2px solid black;
      padding: 0.25rem;
      width: fit-content;
      margin-top: 0;
    }

    .main-cat.right {
      width: 80%;
    }

    .hello {
      font-weight: 800;
      font-size: 3.25rem;
      margin: 0;
    }

    .summary {
      font-size: 0.85rem;
    }

    .summary,
    .experience-group {
      line-height: 1.6;
    }

    .experience {
      padding: 1.25rem;
    }

    .experience-group {
      position: relative;
    }

    .experience-jobs {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      gap: 1.5rem;
    }

    .experience-title {
      font-size: 1.7rem;
      border: none;
      padding-left: 0;
    }

    .job-dates {
      font-weight: bold;
      font-size: 0.6rem;
      text-transform: uppercase;
      transform: translateX(-50%) rotate(-90deg);
      position: absolute;
      text-align: center;
      top: 45%;
      left: 0.9rem;
      letter-spacing: 0.1rem;
    }

    .job-role {
      font-weight: bold;
      text-transform: uppercase;
      margin-left: 3rem;
    }

    .job-company {
      font-style: italic;
      margin-left: 3rem;
      color: #5d5a5adf;
      font-size: 0.8rem;
    }

    .job-description {
      margin-left: 3rem;
      font-size: 0.8rem;
    }

    .education-group {
      line-height: 1.6;
      padding: 1em 0 0 0;
    }

    .education-finished {
      font-weight: bold;
    }

    .skills-list {
      list-style: none;
      margin: 0;
      padding: 1rem 0 0 0;
    }

    .skill {
      line-height: 1.6rem;
    }
  `;static properties={resData:{type:Object}};constructor(){super()}render(){return M`
      <button type="button" class="download-btn" @click=${this.captureCV}>
        Download Resume
      </button>
      <div class="cv-container" id="capture">
        <div class="left-column">
          <div class="basic-info">
            <h1 class="main-cat">${this.resData.role}</h1>
            <p class="hello">Hello, I'm</p>
            <p class="hello hello-name">${this.resData.name}</p>
            <p class="summary">${this.resData.summary}</p>
          </div>
          <div class="experience">
            <h1 class="main-cat experience-title">Experience</h1>
            <div class="experience-jobs">
              ${this.resData.experience.map((e=>M`<div class="experience-group">
                    <div class="job-dates">${e.dates}</div>
                    <div class="job-role">${e.role}</div>
                    <div class="job-company">${e.company}</div>
                    <div class="job-description">${e.description}</div>
                  </div>`))}
            </div>
          </div>
        </div>
        <div class="right-column">
          <div class="contact">
            <div class="main-cat right">Contact</div>
            <div class="contact-details">
              ${Object.values(this.resData.contact).map((e=>M`<p>${e}</p>`))}
            </div>
          </div>
          <div class="education">
            <div class="main-cat right">Education</div>
            <div class="education-details">
              ${this.resData.education.map((e=>M`<div class="education-group">
                    <div class="education-finished">
                      ${e.dateFinished}
                    </div>
                    <div class="education-degree">${e.degree}</div>
                    <div class="education-school">${e.school}</div>
                  </div>`))}
            </div>
          </div>
          <div class="skills">
            <div class="main-cat right">Skills</div>
            <ul class="skills-list">
              ${this.resData.skills.map((e=>M`<li class="skill">${e}</li>`))}
            </ul>
          </div>
        </div>
      </div>
    `}captureCV(e){Ve(this.renderRoot.querySelector("#capture"),{backgroundColor:"white"}).then((function(e){window.saveAs?window.saveAs(e,"my-resume.png"):FileSaver.saveAs(e,"my-resume.png")}))}}customElements.define("build-cv",Fe);class We extends se{static styles=r`
    :host {
      font-family: "Mulish", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f5f6;
    }
    .body-container {
      overflow: auto;
    }
    .page-title {
      text-align: center;
      font-size: 3.75rem;
      margin: 0;
      padding: 0;
      text-shadow: 3px 3px 0px rgba(0, 0, 0, 0.2);
    }
    .main-container {
      display: flex;
      gap: 1rem;
      justify-content: space-around;
    }

    .cv-input {
      width: 40%;
    }

    .input-form {
      margin-top: 2.5rem;
      border: 2px solid black;
    }

    .cv-result {
      max-width: max-content;
    }

    .display-cv {
      margin: 1rem 1rem 1rem 0;
      width: max-content;
      height: max-content;
      box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
    }

    .display-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-right: 1rem;
    }

    .display-header button {
      width: 125px;
      height: 35px;
      border: 3px solid black;
      border-radius: 8px;
      background-color: white;
      cursor: pointer;
    }

    .display-header button:hover {
      box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
    }

    .display-header button:active {
      box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
        rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
    }
  `;static properties={resData:{type:Object}};constructor(){super(),this.resData={role:"Software Engineer",name:"Ichabod Crane",summary:"Frontend engineer experienced in developing modular full-stack JavaScript applications using WebComponents, React, Node, Express, RESTful APIs, and SQL databases.",experience:[{dates:"2022-Present",role:"Software Engineer",company:"Technology Company LLC",description:"Lorem ipsum dolor sit amet. At sunt tempora ea labore recusandae ab rerum mollitia non voluptatibus eligendi id quos temporibus et obcaecati dolorem. Sit odio aspernatur At amet incidunt At ullam optio nam dicta quia."},{dates:"2021",role:"Junior Web Developer",company:"Bob's Builders Online",description:"A sint labore 33 quos galisum a reiciendis excepturi aut corrupti quod aut nostrum porro. Est adipisci nihil et sapiente perferendis ut laborum commodi et voluptates enim vel reiciendis aliquam qui sequi corrupti sit quod voluptas. Non eaque pariatur est ullam nihil id exercitationem delectus est suscipit galisum eos aliquam harum."},{dates:"2020-2021",role:"Intern, Web Development",company:"Bob's Builders Online",description:"A sint labore 33 quos galisum a reiciendis excepturi aut corrupti quod aut nostrum porro. Est adipisci nihil et sapiente perferendis ut laborum commodi et voluptates enim vel reiciendis aliquam qui sequi corrupti sit quod voluptas. Non eaque pariatur est ullam nihil id exercitationem delectus est suscipit galisum eos aliquam harum."}],contact:{email:"ichabod@crane.dev",phone:"123-456-7890",site:"www.crane.dev",city:"Orlando, FL"},education:[{dateFinished:"2017",degree:"Ph.D. Philosophy",school:"UCLA"},{dateFinished:"2007",degree:"B.A. Philosophy",school:"University of Guam"}],skills:["HTML","CSS","JavaScript","Web Components","Lit","React","NodeJS","Python"]}}connectedCallback(){super.connectedCallback(),this.addEventListener("data-updated",this.handleUpdate)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("data-updated",this.handleUpdate)}handleUpdate(e){this.resData={...this.resData,[e.detail.key]:e.detail.value}}render(){return M`
      <link rel="preconnect" href="https://fonts.googleapis.com" />
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
      <link
        href="https://fonts.googleapis.com/css2?family=Mulish:wght@400;700;800&display=swap"
        rel="stylesheet"
      />
      <div class="body-container">
        <h1 class="page-title">Build a CV with Lit</h1>
        <div class="main-container">
          <div class="cv-input">
            <h1>Enter Information Below:</h1>
            <div class="input-header"></div>
            <div class="input-form">
              <cv-form .resData=${this.resData}></cv-form>
            </div>
          </div>
          <div class="cv-result">
            <div class="display-header">
              <h1>Result:</h1>
            </div>
            <div class="display-cv" id="display-cv">
              <build-cv .resData=${this.resData}></build-cv>
            </div>
          </div>
        </div>
      </div>
    `}}customElements.define("main-app",We)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,