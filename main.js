/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={162:function(t,e,i){var n,s;void 0===(s="function"==typeof(n=function(){"use strict";function e(t,e,i){var n=new XMLHttpRequest;n.open("GET",t),n.responseType="blob",n.onload=function(){a(n.response,e,i)},n.onerror=function(){console.error("could not download file")},n.send()}function n(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function s(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(i){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof i.g&&i.g.global===i.g?i.g:void 0,r=o.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),a=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype&&!r?function(t,i,r){var a=o.URL||o.webkitURL,l=document.createElement("a");i=i||t.name||"download",l.download=i,l.rel="noopener","string"==typeof t?(l.href=t,l.origin===location.origin?s(l):n(l.href)?e(t,i,r):s(l,l.target="_blank")):(l.href=a.createObjectURL(t),setTimeout((function(){a.revokeObjectURL(l.href)}),4e4),setTimeout((function(){s(l)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,i,o){if(i=i||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),i);else if(n(t))e(t,i,o);else{var r=document.createElement("a");r.href=t,r.target="_blank",setTimeout((function(){s(r)}))}}:function(t,i,n,s){if((s=s||open("","_blank"))&&(s.document.title=s.document.body.innerText="downloading..."),"string"==typeof t)return e(t,i,n);var a="application/octet-stream"===t.type,l=/constructor/i.test(o.HTMLElement)||o.safari,c=/CriOS\/[\d]+/.test(navigator.userAgent);if((c||a&&l||r)&&"undefined"!=typeof FileReader){var d=new FileReader;d.onloadend=function(){var t=d.result;t=c?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),s?s.location.href=t:location=t,s=null},d.readAsDataURL(t)}else{var u=o.URL||o.webkitURL,p=u.createObjectURL(t);s?s.location=p:location.href=p,s=null,setTimeout((function(){u.revokeObjectURL(p)}),4e4)}});o.saveAs=a.saveAs=a,t.exports=a})?n.apply(e,[]):n)||(t.exports=s)}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";const t=window,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,n=Symbol(),s=new WeakMap;class o{constructor(t,e,i){if(this._$cssResult$=!0,i!==n)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const i=this.t;if(e&&void 0===t){const e=void 0!==i&&1===i.length;e&&(t=s.get(i)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&s.set(i,t))}return t}toString(){return this.cssText}}const r=(t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,n)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[n+1]),t[0]);return new o(i,t,n)},a=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new o("string"==typeof t?t:t+"",void 0,n))(e)})(t):t;var l;const c=window,d=c.trustedTypes,u=d?d.emptyScript:"",p=c.reactiveElementPolyfillSupport,h={toAttribute(t,e){switch(e){case Boolean:t=t?u:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},m=(t,e)=>e!==t&&(e==e||t==t),f={attribute:!0,type:String,converter:h,reflect:!1,hasChanged:m},v="finalized";class g extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const n=this._$Ep(i,e);void 0!==n&&(this._$Ev.set(n,i),t.push(n))})),t}static createProperty(t,e=f){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,n=this.getPropertyDescriptor(t,i,e);void 0!==n&&Object.defineProperty(this.prototype,t,n)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(n){const s=this[t];this[e]=n,this.requestUpdate(t,s,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||f}static finalize(){if(this.hasOwnProperty(v))return!1;this[v]=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(a(t))}else void 0!==t&&e.push(a(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var i;const n=null!==(i=this.shadowRoot)&&void 0!==i?i:this.attachShadow(this.constructor.shadowRootOptions);return((i,n)=>{e?i.adoptedStyleSheets=n.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):n.forEach((e=>{const n=document.createElement("style"),s=t.litNonce;void 0!==s&&n.setAttribute("nonce",s),n.textContent=e.cssText,i.appendChild(n)}))})(n,this.constructor.elementStyles),n}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=f){var n;const s=this.constructor._$Ep(t,i);if(void 0!==s&&!0===i.reflect){const o=(void 0!==(null===(n=i.converter)||void 0===n?void 0:n.toAttribute)?i.converter:h).toAttribute(e,i.type);this._$El=t,null==o?this.removeAttribute(s):this.setAttribute(s,o),this._$El=null}}_$AK(t,e){var i;const n=this.constructor,s=n._$Ev.get(t);if(void 0!==s&&this._$El!==s){const t=n.getPropertyOptions(s),o="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(i=t.converter)||void 0===i?void 0:i.fromAttribute)?t.converter:h;this._$El=s,this[s]=o.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,i){let n=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||m)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):n=!1),!this.isUpdatePending&&n&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var b;g[v]=!0,g.elementProperties=new Map,g.elementStyles=[],g.shadowRootOptions={mode:"open"},null==p||p({ReactiveElement:g}),(null!==(l=c.reactiveElementVersions)&&void 0!==l?l:c.reactiveElementVersions=[]).push("1.6.2");const y=window,$=y.trustedTypes,x=$?$.createPolicy("lit-html",{createHTML:t=>t}):void 0,w="$lit$",A=`lit$${(Math.random()+"").slice(9)}$`,_="?"+A,E=`<${_}>`,S=document,C=()=>S.createComment(""),k=t=>null===t||"object"!=typeof t&&"function"!=typeof t,U=Array.isArray,P="[ \t\n\f\r]",R=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,D=/-->/g,O=/>/g,T=RegExp(`>|${P}(?:([^\\s"'>=/]+)(${P}*=${P}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),j=/'/g,L=/"/g,N=/^(?:script|style|textarea|title)$/i,H=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),M=H(1),I=(H(2),Symbol.for("lit-noChange")),z=Symbol.for("lit-nothing"),q=new WeakMap,B=S.createTreeWalker(S,129,null,!1),V=(t,e)=>{const i=t.length-1,n=[];let s,o=2===e?"<svg>":"",r=R;for(let e=0;e<i;e++){const i=t[e];let a,l,c=-1,d=0;for(;d<i.length&&(r.lastIndex=d,l=r.exec(i),null!==l);)d=r.lastIndex,r===R?"!--"===l[1]?r=D:void 0!==l[1]?r=O:void 0!==l[2]?(N.test(l[2])&&(s=RegExp("</"+l[2],"g")),r=T):void 0!==l[3]&&(r=T):r===T?">"===l[0]?(r=null!=s?s:R,c=-1):void 0===l[1]?c=-2:(c=r.lastIndex-l[2].length,a=l[1],r=void 0===l[3]?T:'"'===l[3]?L:j):r===L||r===j?r=T:r===D||r===O?r=R:(r=T,s=void 0);const u=r===T&&t[e+1].startsWith("/>")?" ":"";o+=r===R?i+E:c>=0?(n.push(a),i.slice(0,c)+w+i.slice(c)+A+u):i+A+(-2===c?(n.push(void 0),e):u)}const a=o+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==x?x.createHTML(a):a,n]};class F{constructor({strings:t,_$litType$:e},i){let n;this.parts=[];let s=0,o=0;const r=t.length-1,a=this.parts,[l,c]=V(t,e);if(this.el=F.createElement(l,i),B.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(n=B.nextNode())&&a.length<r;){if(1===n.nodeType){if(n.hasAttributes()){const t=[];for(const e of n.getAttributeNames())if(e.endsWith(w)||e.startsWith(A)){const i=c[o++];if(t.push(e),void 0!==i){const t=n.getAttribute(i.toLowerCase()+w).split(A),e=/([.?@])?(.*)/.exec(i);a.push({type:1,index:s,name:e[2],strings:t,ctor:"."===e[1]?K:"?"===e[1]?Z:"@"===e[1]?Y:X})}else a.push({type:6,index:s})}for(const e of t)n.removeAttribute(e)}if(N.test(n.tagName)){const t=n.textContent.split(A),e=t.length-1;if(e>0){n.textContent=$?$.emptyScript:"";for(let i=0;i<e;i++)n.append(t[i],C()),B.nextNode(),a.push({type:2,index:++s});n.append(t[e],C())}}}else if(8===n.nodeType)if(n.data===_)a.push({type:2,index:s});else{let t=-1;for(;-1!==(t=n.data.indexOf(A,t+1));)a.push({type:7,index:s}),t+=A.length-1}s++}}static createElement(t,e){const i=S.createElement("template");return i.innerHTML=t,i}}function W(t,e,i=t,n){var s,o,r,a;if(e===I)return e;let l=void 0!==n?null===(s=i._$Co)||void 0===s?void 0:s[n]:i._$Cl;const c=k(e)?void 0:e._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(o=null==l?void 0:l._$AO)||void 0===o||o.call(l,!1),void 0===c?l=void 0:(l=new c(t),l._$AT(t,i,n)),void 0!==n?(null!==(r=(a=i)._$Co)&&void 0!==r?r:a._$Co=[])[n]=l:i._$Cl=l),void 0!==l&&(e=W(t,l._$AS(t,e.values),l,n)),e}class J{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:i},parts:n}=this._$AD,s=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:S).importNode(i,!0);B.currentNode=s;let o=B.nextNode(),r=0,a=0,l=n[0];for(;void 0!==l;){if(r===l.index){let e;2===l.type?e=new G(o,o.nextSibling,this,t):1===l.type?e=new l.ctor(o,l.name,l.strings,this,t):6===l.type&&(e=new tt(o,this,t)),this._$AV.push(e),l=n[++a]}r!==(null==l?void 0:l.index)&&(o=B.nextNode(),r++)}return B.currentNode=S,s}v(t){let e=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class G{constructor(t,e,i,n){var s;this.type=2,this._$AH=z,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=n,this._$Cp=null===(s=null==n?void 0:n.isConnected)||void 0===s||s}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=W(this,t,e),k(t)?t===z||null==t||""===t?(this._$AH!==z&&this._$AR(),this._$AH=z):t!==this._$AH&&t!==I&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>U(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==z&&k(this._$AH)?this._$AA.nextSibling.data=t:this.$(S.createTextNode(t)),this._$AH=t}g(t){var e;const{values:i,_$litType$:n}=t,s="number"==typeof n?this._$AC(t):(void 0===n.el&&(n.el=F.createElement(n.h,this.options)),n);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===s)this._$AH.v(i);else{const t=new J(s,this),e=t.u(this.options);t.v(i),this.$(e),this._$AH=t}}_$AC(t){let e=q.get(t.strings);return void 0===e&&q.set(t.strings,e=new F(t)),e}T(t){U(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,n=0;for(const s of t)n===e.length?e.push(i=new G(this.k(C()),this.k(C()),this,this.options)):i=e[n],i._$AI(s),n++;n<e.length&&(this._$AR(i&&i._$AB.nextSibling,n),e.length=n)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class X{constructor(t,e,i,n,s){this.type=1,this._$AH=z,this._$AN=void 0,this.element=t,this.name=e,this._$AM=n,this.options=s,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=z}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,n){const s=this.strings;let o=!1;if(void 0===s)t=W(this,t,e,0),o=!k(t)||t!==this._$AH&&t!==I,o&&(this._$AH=t);else{const n=t;let r,a;for(t=s[0],r=0;r<s.length-1;r++)a=W(this,n[i+r],e,r),a===I&&(a=this._$AH[r]),o||(o=!k(a)||a!==this._$AH[r]),a===z?t=z:t!==z&&(t+=(null!=a?a:"")+s[r+1]),this._$AH[r]=a}o&&!n&&this.j(t)}j(t){t===z?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class K extends X{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===z?void 0:t}}const Q=$?$.emptyScript:"";class Z extends X{constructor(){super(...arguments),this.type=4}j(t){t&&t!==z?this.element.setAttribute(this.name,Q):this.element.removeAttribute(this.name)}}class Y extends X{constructor(t,e,i,n,s){super(t,e,i,n,s),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=W(this,t,e,0))&&void 0!==i?i:z)===I)return;const n=this._$AH,s=t===z&&n!==z||t.capture!==n.capture||t.once!==n.once||t.passive!==n.passive,o=t!==z&&(n===z||s);s&&this.element.removeEventListener(this.name,this,n),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class tt{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){W(this,t)}}const et=y.litHtmlPolyfillSupport;var it,nt;null==et||et(F,G),(null!==(b=y.litHtmlVersions)&&void 0!==b?b:y.litHtmlVersions=[]).push("2.7.4");class st extends g{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{var n,s;const o=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:e;let r=o._$litPart$;if(void 0===r){const t=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:null;o._$litPart$=r=new G(e.insertBefore(C(),t),t,void 0,null!=i?i:{})}return r._$AI(t),r})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return I}}st.finalized=!0,st._$litElement$=!0,null===(it=globalThis.litElementHydrateSupport)||void 0===it||it.call(globalThis,{LitElement:st});const ot=globalThis.litElementPolyfillSupport;null==ot||ot({LitElement:st}),(null!==(nt=globalThis.litElementVersions)&&void 0!==nt?nt:globalThis.litElementVersions=[]).push("3.3.2");class rt extends st{static styles=r`
    .collapsible-label {
      background-color: black;
      color: white;
      cursor: pointer;
      padding: 0.5rem;
      width: 100%;
      border: none;
      text-align: left;
      outline: none;
      font-size: 1.2rem;
    }
    .collapsible-label:hover {
      background-color: #2f2f2f;
    }
    .collapsible-label:after {
      content: "+";
      font-size: 20px;
      color: white;
      float: right;
      margin-left: 5px;
    }
    .active:after {
      content: "-";
    }
    .content {
      padding: 0;
      opacity: 0;
      max-height: 0;
      overflow: auto;
      transition: ease 0.25s;
    }
    .expanded {
      opacity: 1;
      max-height: 300px;
      padding: 1rem;
    }
  `;static properties={topLabel:{attribute:"top-label"},expanded:{type:Boolean}};constructor(){super(),this.topLabel="Collapsible Label",this.expanded=!1}render(){return M`
      <button
        type="button"
        class="collapsible-label ${this.expanded?"active":""}"
        @click=${this.setExpanded}
      >
        ${this.topLabel}
      </button>
      <div class="content ${this.expanded?"expanded":""}">
        <slot></slot>
      </div>
    `}setExpanded(){this.expanded=!this.expanded}}customElements.define("collapsible-div",rt);const at=r`
  .form-container {
    margin: 0;
    padding: 0;
  }

  .job-header,
  .ed-header {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .job-header h1,
  .ed-header h1 {
    font-size: 1.3rem;
  }

  collapsible-div button {
    font-size: 0.8rem;
    padding: 0.3rem;
    border: 2px solid black;
    border-radius: 8px;
    background-color: white;
    cursor: pointer;
  }

  collapsible-div button:hover {
    box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
  }

  collapsible-div button:active {
    box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
      rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  textarea {
    font-family: inherit;
    font-size: 0.9rem;
  }

  .input-group input {
    padding: 0.5rem;
    width: 15rem;
    min-width: 75%;
    border: 1px solid rgb(218, 209, 209);
    border-radius: 0.33em;
  }

  .input-group textarea {
    padding: 0.5rem;
    border: 1px solid rgb(218, 209, 209);
    width: 15rem;
    min-width: 75%;
    height: 5rem;
    border-radius: 0.33em;
    resize: none;
  }

  .input-el {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }
`;class lt extends st{static properties={resData:{type:Object},experience:{type:Array}};static styles=[at,r`
      button {
        font-size: 0.8rem;
        padding: 0.3rem;
        border: 2px solid black;
        border-radius: 8px;
        background-color: white;
        cursor: pointer;
      }

      button:hover {
        box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
      }

      button:active {
        box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
          rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
      }
    `];connectedCallback(){super.connectedCallback(),this.experience=[...this.resData.experience]}constructor(){super()}render(){return M`
      ${this.resData.experience.map(((t,e)=>M`
          <div class="experience-group">
            <div class="job-header">
              <h1>Job #${e+1}</h1>
              <button type="button" class="delete-ex-btn">Delete Job</button>
            </div>
            <div class="input-group">
              <label
                >Dates:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${t.dates}"
                    @input=${t=>{const i=e,n=t.target.value;this.sendUpdateArrayOfObjects(i,"dates",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >Role:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${t.role}"
                    @input=${t=>{const i=e,n=t.target.value;this.sendUpdateArrayOfObjects(i,"role",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >Company:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${t.company}"
                    @input=${t=>{const i=e,n=t.target.value;this.sendUpdateArrayOfObjects(i,"company",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >Summary:
                <p class="input-el">
                  <textarea
                    .value=${t.description}
                    @input=${t=>{const i=e,n=t.target.value;this.sendUpdateArrayOfObjects(i,"description",n)}}
                  ></textarea>
                </p>
              </label>
            </div>
            ${e+1==this.resData.experience.length?M`<button type="button" class="add-ed-btn">
                  Add Education
                </button>`:z}
          </div>
        `))}
    `}sendUpdateArrayOfObjects(t,e,i){let n;n=structuredClone(this.experience),n[t][e]=i,this.experience=[...n];const s=new CustomEvent("data-updated",{detail:{key:"experience",value:this.experience},bubbles:!0,composed:!0});this.dispatchEvent(s)}}customElements.define("experience-manager",lt);class ct extends st{static properties={resData:{type:Object},education:{type:Array}};static styles=[at,r`
      button {
        font-size: 0.8rem;
        padding: 0.3rem;
        border: 2px solid black;
        border-radius: 8px;
        background-color: white;
        cursor: pointer;
      }

      button:hover {
        box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
      }

      button:active {
        box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
          rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
      }
    `];connectedCallback(){super.connectedCallback(),this.education=[...this.resData.education]}constructor(){super()}render(){return M`
      ${this.resData.education.map(((t,e)=>M`
          <div class="education-group">
            <div class="ed-header">
              <h1>Education #${e+1}</h1>
              <button type="button" class="delete-ed-btn">
                Delete Education
              </button>
            </div>
            <div class="input-group">
              <label
                >Date Finished:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${t.dateFinished}"
                    @input=${t=>{const i=e,n=t.target.value;this.sendUpdateArrayOfObjects(i,"dateFinished",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >Degree/Major:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${t.degree}"
                    @input=${t=>{const i=e,n=t.target.value;this.sendUpdateArrayOfObjects(i,"degree",n)}}
                  />
                </p>
              </label>
            </div>
            <div class="input-group">
              <label
                >School:
                <p class="input-el">
                  <input
                    type="text"
                    .value="${t.school}"
                    @input=${t=>{const i=e,n=t.target.value;this.sendUpdateArrayOfObjects(i,"school",n)}}
                  />
                </p>
              </label>
            </div>
            ${e+1==this.resData.education.length?M`<button
                  type="button"
                  class="add-ed-btn"
                  @click=${t=>console.log("clicked")}
                >
                  Add Education
                </button>`:z}
          </div>
        `))}
    `}sendUpdateArrayOfObjects(t,e,i){let n;n=structuredClone(this.education),n[t][e]=i,this.education=[...n];const s=new CustomEvent("data-updated",{detail:{key:"education",value:this.education},bubbles:!0,composed:!0});this.dispatchEvent(s)}}customElements.define("education-manager",ct);class dt extends st{static properties={resData:{type:Object},conactInfo:{type:Object}};static styles=[at,r``];connectedCallback(){super.connectedCallback(),this.contactInfo={...this.resData.contact}}constructor(){super()}render(){return M`
      <div class="input-group">
        <label>
          Email:
          <p class="input-el">
            <input
              type="text"
              .value="${this.resData.contact.email}"
              @input=${t=>{const e=t.target.value;this.sendUpdateContact("email",e)}}
            />
          </p>
        </label>
      </div>
      <div class="input-group">
        <label
          >Phone:
          <p class="input-el">
            <input
              type="text"
              .value="${this.resData.contact.phone}"
              @input=${t=>{const e=t.target.value;this.sendUpdateContact("phone",e)}}
            />
          </p>
        </label>
      </div>
      <div class="input-group">
        <label
          >Website:
          <p class="input-el">
            <input
              type="text"
              .value="${this.resData.contact.site}"
              @input=${t=>{const e=t.target.value;this.sendUpdateContact("site",e)}}
            />
          </p>
        </label>
      </div>
      <div class="input-group">
        <label
          >City:
          <p class="input-el">
            <input
              type="text"
              .value="${this.resData.contact.city}"
              @input=${t=>{const e=t.target.value;this.sendUpdateContact("city",e)}}
            />
          </p>
        </label>
      </div>
    `}sendUpdateContact(t,e){let i;i=structuredClone(this.contactInfo),i[t]=e,this.contactInfo={...i};const n=new CustomEvent("data-updated",{detail:{key:"contact",value:this.contactInfo},bubbles:!0,composed:!0});this.dispatchEvent(n)}}customElements.define("contact-manager",dt);class ut extends st{static properties={resData:{type:Object},experience:{type:Array},education:{type:Array},skills:{type:Array},contactInfo:{type:Object}};static styles=[at,r``];constructor(){super()}connectedCallback(){super.connectedCallback(),this.skills=[...this.resData.skills]}render(){return M`
      <div class="form-container">
        <collapsible-div top-label="Title/Role">
          <div class="input-group">
            <label
              >Job Title:
              <p class="input-el">
                <input
                  type="text"
                  .value="${this.resData.role}"
                  @input=${t=>{const e=t.target.value;this.sendUpdateSimple("role",e)}}
                />
              </p>
            </label>
          </div> </collapsible-div
        ><collapsible-div top-label="Name">
          <div class="input-group">
            <label
              >Name:
              <p class="input-el">
                <input
                  type="text"
                  .value="${this.resData.name}"
                  @input=${t=>{const e=t.target.value;this.sendUpdateSimple("name",e)}}
                />
              </p>
            </label>
          </div>
        </collapsible-div>
        <collapsible-div top-label="Contact Info">
        <contact-manager .resData=${this.resData}></contact-manager>
        </div>
        </collapsible-div>
        <collapsible-div top-label="Personal Summary">
          <div class="input-group">
            <label
              >Summary:
              <p class="input-el">
                <textarea
                  .value=${this.resData.summary}
                  @input=${t=>{const e=t.target.value;this.sendUpdateSimple("summary",e)}}
                ></textarea>
              </p>
            </label>
          </div>
        </collapsible-div>
        <collapsible-div top-label="Experience">
          <experience-manager .resData=${this.resData}></experience-manager>
        </collapsible-div>
        <collapsible-div top-label="Education">
          <education-manager .resData=${this.resData}></education-manager>
        </collapsible-div>
        <collapsible-div top-label="Skills">
          <div class="input-group">
            <label
              >Skills (type skills separated by commas):
              <p class="input-el">
                <textarea
                  @input=${t=>{const e=t.target.value.split(",").filter((t=>""!=t.trim())).map((t=>t.trim()));this.sendUpdateSimple("skills",e)}}
                >
${this.resData.skills.join()}</textarea
                >
              </p>
            </label>
          </div>
        </collapsible-div>
      </div>
    `}sendUpdateSimple(t,e){const i=new CustomEvent("data-updated",{detail:{key:t,value:e},bubbles:!0,composed:!0});this.dispatchEvent(i)}}customElements.define("cv-form",ut),i(162);const pt=(()=>{let t=0;return()=>(t+=1,`u${`0000${(Math.random()*36**4<<0).toString(36)}`.slice(-4)}${t}`)})();function ht(t){const e=[];for(let i=0,n=t.length;i<n;i++)e.push(t[i]);return e}function mt(t,e){const i=(t.ownerDocument.defaultView||window).getComputedStyle(t).getPropertyValue(e);return i?parseFloat(i.replace("px","")):0}function ft(t,e={}){return{width:e.width||function(t){const e=mt(t,"border-left-width"),i=mt(t,"border-right-width");return t.clientWidth+e+i}(t),height:e.height||function(t){const e=mt(t,"border-top-width"),i=mt(t,"border-bottom-width");return t.clientHeight+e+i}(t)}}const vt=16384;function gt(t){return new Promise(((e,i)=>{const n=new Image;n.decode=()=>e(n),n.onload=()=>e(n),n.onerror=i,n.crossOrigin="anonymous",n.decoding="async",n.src=t}))}const bt=(t,e)=>{if(t instanceof e)return!0;const i=Object.getPrototypeOf(t);return null!==i&&(i.constructor.name===e.name||bt(i,e))};function yt(t,e,i){const n=window.getComputedStyle(t,i),s=n.getPropertyValue("content");if(""===s||"none"===s)return;const o=pt();try{e.className=`${e.className} ${o}`}catch(t){return}const r=document.createElement("style");r.appendChild(function(t,e,i){const n=`.${t}:${e}`,s=i.cssText?function(t){const e=t.getPropertyValue("content");return`${t.cssText} content: '${e.replace(/'|"/g,"")}';`}(i):function(t){return ht(t).map((e=>`${e}: ${t.getPropertyValue(e)}${t.getPropertyPriority(e)?" !important":""};`)).join(" ")}(i);return document.createTextNode(`${n}{${s}}`)}(o,i,n)),e.appendChild(r)}const $t="application/font-woff",xt="image/jpeg",wt={woff:$t,woff2:$t,ttf:"application/font-truetype",eot:"application/vnd.ms-fontobject",png:"image/png",jpg:xt,jpeg:xt,gif:"image/gif",tiff:"image/tiff",svg:"image/svg+xml",webp:"image/webp"};function At(t){const e=function(t){const e=/\.([^./]*?)$/g.exec(t);return e?e[1]:""}(t).toLowerCase();return wt[e]||""}function _t(t){return-1!==t.search(/^(data:)/)}function Et(t,e){return`data:${e};base64,${t}`}async function St(t,e,i){const n=await fetch(t,e);if(404===n.status)throw new Error(`Resource "${n.url}" not found`);const s=await n.blob();return new Promise(((t,e)=>{const o=new FileReader;o.onerror=e,o.onloadend=()=>{try{t(i({res:n,result:o.result}))}catch(t){e(t)}},o.readAsDataURL(s)}))}const Ct={};async function kt(t,e,i){const n=function(t,e,i){let n=t.replace(/\?.*/,"");return i&&(n=t),/ttf|otf|eot|woff2?/i.test(n)&&(n=n.replace(/.*\//,"")),e?`[${e}]${n}`:n}(t,e,i.includeQueryParams);if(null!=Ct[n])return Ct[n];let s;i.cacheBust&&(t+=(/\?/.test(t)?"&":"?")+(new Date).getTime());try{const n=await St(t,i.fetchRequestInit,(({res:t,result:i})=>(e||(e=t.headers.get("Content-Type")||""),function(t){return t.split(/,/)[1]}(i))));s=Et(n,e)}catch(e){s=i.imagePlaceholder||"";let n=`Failed to fetch resource: ${t}`;e&&(n="string"==typeof e?e:e.message),n&&console.warn(n)}return Ct[n]=s,s}const Ut=t=>null!=t.tagName&&"SLOT"===t.tagName.toUpperCase();async function Pt(t,e,i){return i||!e.filter||e.filter(t)?Promise.resolve(t).then((t=>async function(t,e){return bt(t,HTMLCanvasElement)?async function(t){const e=t.toDataURL();return"data:,"===e?t.cloneNode(!1):gt(e)}(t):bt(t,HTMLVideoElement)?async function(t,e){if(t.currentSrc){const e=document.createElement("canvas"),i=e.getContext("2d");return e.width=t.clientWidth,e.height=t.clientHeight,null==i||i.drawImage(t,0,0,e.width,e.height),gt(e.toDataURL())}const i=t.poster,n=At(i);return gt(await kt(i,n,e))}(t,e):bt(t,HTMLIFrameElement)?async function(t){var e;try{if(null===(e=null==t?void 0:t.contentDocument)||void 0===e?void 0:e.body)return await Pt(t.contentDocument.body,{},!0)}catch(t){}return t.cloneNode(!1)}(t):t.cloneNode(!1)}(t,e))).then((i=>async function(t,e,i){var n,s;let o=[];return o=Ut(t)&&t.assignedNodes?ht(t.assignedNodes()):bt(t,HTMLIFrameElement)&&(null===(n=t.contentDocument)||void 0===n?void 0:n.body)?ht(t.contentDocument.body.childNodes):ht((null!==(s=t.shadowRoot)&&void 0!==s?s:t).childNodes),0===o.length||bt(t,HTMLVideoElement)||await o.reduce(((t,n)=>t.then((()=>Pt(n,i))).then((t=>{t&&e.appendChild(t)}))),Promise.resolve()),e}(t,i,e))).then((e=>function(t,e){return bt(e,Element)&&(function(t,e){const i=e.style;if(!i)return;const n=window.getComputedStyle(t);n.cssText?(i.cssText=n.cssText,i.transformOrigin=n.transformOrigin):ht(n).forEach((s=>{let o=n.getPropertyValue(s);if("font-size"===s&&o.endsWith("px")){const t=Math.floor(parseFloat(o.substring(0,o.length-2)))-.1;o=`${t}px`}bt(t,HTMLIFrameElement)&&"display"===s&&"inline"===o&&(o="block"),"d"===s&&e.getAttribute("d")&&(o=`path(${e.getAttribute("d")})`),i.setProperty(s,o,n.getPropertyPriority(s))}))}(t,e),function(t,e){yt(t,e,":before"),yt(t,e,":after")}(t,e),function(t,e){bt(t,HTMLTextAreaElement)&&(e.innerHTML=t.value),bt(t,HTMLInputElement)&&e.setAttribute("value",t.value)}(t,e),function(t,e){if(bt(t,HTMLSelectElement)){const i=e,n=Array.from(i.children).find((e=>t.value===e.getAttribute("value")));n&&n.setAttribute("selected","")}}(t,e)),e}(t,e))).then((t=>async function(t,e){const i=t.querySelectorAll?t.querySelectorAll("use"):[];if(0===i.length)return t;const n={};for(let s=0;s<i.length;s++){const o=i[s].getAttribute("xlink:href");if(o){const i=t.querySelector(o),s=document.querySelector(o);i||!s||n[o]||(n[o]=await Pt(s,e,!0))}}const s=Object.values(n);if(s.length){const e="http://www.w3.org/1999/xhtml",i=document.createElementNS(e,"svg");i.setAttribute("xmlns",e),i.style.position="absolute",i.style.width="0",i.style.height="0",i.style.overflow="hidden",i.style.display="none";const n=document.createElementNS(e,"defs");i.appendChild(n);for(let t=0;t<s.length;t++)n.appendChild(s[t]);t.appendChild(i)}return t}(t,e))):null}const Rt=/url\((['"]?)([^'"]+?)\1\)/g,Dt=/url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g,Ot=/src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;function Tt(t){return-1!==t.search(Rt)}async function jt(t,e,i){if(!Tt(t))return t;const n=function(t,{preferredFontFormat:e}){return e?t.replace(Ot,(t=>{for(;;){const[i,,n]=Dt.exec(t)||[];if(!n)return"";if(n===e)return`src: ${i};`}})):t}(t,i),s=function(t){const e=[];return t.replace(Rt,((t,i,n)=>(e.push(n),t))),e.filter((t=>!_t(t)))}(n);return s.reduce(((t,n)=>t.then((t=>async function(t,e,i,n,s){try{const o=i?function(t,e){if(t.match(/^[a-z]+:\/\//i))return t;if(t.match(/^\/\//))return window.location.protocol+t;if(t.match(/^[a-z]+:/i))return t;const i=document.implementation.createHTMLDocument(),n=i.createElement("base"),s=i.createElement("a");return i.head.appendChild(n),i.body.appendChild(s),e&&(n.href=e),s.href=t,s.href}(e,i):e,r=At(e);let a;return a=s?Et(await s(o),r):await kt(o,r,n),t.replace(function(t){const e=t.replace(/([.*+?^${}()|\[\]\/\\])/g,"\\$1");return new RegExp(`(url\\(['"]?)(${e})(['"]?\\))`,"g")}(e),`$1${a}$3`)}catch(t){}return t}(t,n,e,i)))),Promise.resolve(n))}async function Lt(t,e,i){var n;const s=null===(n=e.style)||void 0===n?void 0:n.getPropertyValue(t);if(s){const n=await jt(s,null,i);return e.style.setProperty(t,n,e.style.getPropertyPriority(t)),!0}return!1}async function Nt(t,e){bt(t,Element)&&(await async function(t,e){await Lt("background",t,e)||await Lt("background-image",t,e),await Lt("mask",t,e)||await Lt("mask-image",t,e)}(t,e),await async function(t,e){const i=bt(t,HTMLImageElement);if((!i||_t(t.src))&&(!bt(t,SVGImageElement)||_t(t.href.baseVal)))return;const n=i?t.src:t.href.baseVal,s=await kt(n,At(n),e);await new Promise(((e,n)=>{t.onload=e,t.onerror=n;const o=t;o.decode&&(o.decode=e),"lazy"===o.loading&&(o.loading="eager"),i?(t.srcset="",t.src=s):t.href.baseVal=s}))}(t,e),await async function(t,e){const i=ht(t.childNodes).map((t=>Nt(t,e)));await Promise.all(i).then((()=>t))}(t,e))}const Ht={};async function Mt(t){let e=Ht[t];if(null!=e)return e;const i=await fetch(t);return e={url:t,cssText:await i.text()},Ht[t]=e,e}async function It(t,e){let i=t.cssText;const n=/url\(["']?([^"')]+)["']?\)/g,s=(i.match(/url\([^)]+\)/g)||[]).map((async s=>{let o=s.replace(n,"$1");return o.startsWith("https://")||(o=new URL(o,t.url).href),St(o,e.fetchRequestInit,(({result:t})=>(i=i.replace(s,`url(${t})`),[s,t])))}));return Promise.all(s).then((()=>i))}function zt(t){if(null==t)return[];const e=[];let i=t.replace(/(\/\*[\s\S]*?\*\/)/gi,"");const n=new RegExp("((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})","gi");for(;;){const t=n.exec(i);if(null===t)break;e.push(t[0])}i=i.replace(n,"");const s=/@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi,o=new RegExp("((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})","gi");for(;;){let t=s.exec(i);if(null===t){if(t=o.exec(i),null===t)break;s.lastIndex=o.lastIndex}else o.lastIndex=s.lastIndex;e.push(t[0])}return e}async function qt(t,e){const i=null!=e.fontEmbedCSS?e.fontEmbedCSS:e.skipFonts?null:await async function(t,e){const i=await async function(t,e){if(null==t.ownerDocument)throw new Error("Provided element is not within a Document");const i=ht(t.ownerDocument.styleSheets),n=await async function(t,e){const i=[],n=[];return t.forEach((i=>{if("cssRules"in i)try{ht(i.cssRules||[]).forEach(((t,s)=>{if(t.type===CSSRule.IMPORT_RULE){let o=s+1;const r=Mt(t.href).then((t=>It(t,e))).then((t=>zt(t).forEach((t=>{try{i.insertRule(t,t.startsWith("@import")?o+=1:i.cssRules.length)}catch(e){console.error("Error inserting rule from remote css",{rule:t,error:e})}})))).catch((t=>{console.error("Error loading remote css",t.toString())}));n.push(r)}}))}catch(s){const o=t.find((t=>null==t.href))||document.styleSheets[0];null!=i.href&&n.push(Mt(i.href).then((t=>It(t,e))).then((t=>zt(t).forEach((t=>{o.insertRule(t,i.cssRules.length)})))).catch((t=>{console.error("Error loading remote stylesheet",t)}))),console.error("Error inlining remote css file",s)}})),Promise.all(n).then((()=>(t.forEach((t=>{if("cssRules"in t)try{ht(t.cssRules||[]).forEach((t=>{i.push(t)}))}catch(e){console.error(`Error while reading CSS rules from ${t.href}`,e)}})),i)))}(i,e);return function(t){return t.filter((t=>t.type===CSSRule.FONT_FACE_RULE)).filter((t=>Tt(t.style.getPropertyValue("src"))))}(n)}(t,e);return(await Promise.all(i.map((t=>{const i=t.parentStyleSheet?t.parentStyleSheet.href:null;return jt(t.cssText,i,e)})))).join("\n")}(t,e);if(i){const e=document.createElement("style"),n=document.createTextNode(i);e.appendChild(n),t.firstChild?t.insertBefore(e,t.firstChild):t.appendChild(e)}}async function Bt(t,e={}){const{width:i,height:n}=ft(t,e),s=await Pt(t,e,!0);return await qt(s,e),await Nt(s,e),function(t,e){const{style:i}=t;e.backgroundColor&&(i.backgroundColor=e.backgroundColor),e.width&&(i.width=`${e.width}px`),e.height&&(i.height=`${e.height}px`);const n=e.style;null!=n&&Object.keys(n).forEach((t=>{i[t]=n[t]}))}(s,e),await async function(t,e,i){const n="http://www.w3.org/2000/svg",s=document.createElementNS(n,"svg"),o=document.createElementNS(n,"foreignObject");return s.setAttribute("width",`${e}`),s.setAttribute("height",`${i}`),s.setAttribute("viewBox",`0 0 ${e} ${i}`),o.setAttribute("width","100%"),o.setAttribute("height","100%"),o.setAttribute("x","0"),o.setAttribute("y","0"),o.setAttribute("externalResourcesRequired","true"),s.appendChild(o),o.appendChild(t),async function(t){return Promise.resolve().then((()=>(new XMLSerializer).serializeToString(t))).then(encodeURIComponent).then((t=>`data:image/svg+xml;charset=utf-8,${t}`))}(s)}(s,i,n)}async function Vt(t,e={}){const i=await async function(t,e={}){const{width:i,height:n}=ft(t,e),s=await Bt(t,e),o=await gt(s),r=document.createElement("canvas"),a=r.getContext("2d"),l=e.pixelRatio||function(){let t,e;try{e=process}catch(t){}const i=e&&e.env?e.env.devicePixelRatio:null;return i&&(t=parseInt(i,10),Number.isNaN(t)&&(t=1)),t||window.devicePixelRatio||1}(),c=e.canvasWidth||i,d=e.canvasHeight||n;return r.width=c*l,r.height=d*l,e.skipAutoScale||function(t){(t.width>vt||t.height>vt)&&(t.width>vt&&t.height>vt?t.width>t.height?(t.height*=vt/t.width,t.width=vt):(t.width*=vt/t.height,t.height=vt):t.width>vt?(t.height*=vt/t.width,t.width=vt):(t.width*=vt/t.height,t.height=vt))}(r),r.style.width=`${c}`,r.style.height=`${d}`,e.backgroundColor&&(a.fillStyle=e.backgroundColor,a.fillRect(0,0,r.width,r.height)),a.drawImage(o,0,0,r.width,r.height),r}(t,e),n=await function(t,e={}){return t.toBlob?new Promise((i=>{t.toBlob(i,e.type?e.type:"image/png",e.quality?e.quality:1)})):new Promise((i=>{const n=window.atob(t.toDataURL(e.type?e.type:void 0,e.quality?e.quality:void 0).split(",")[1]),s=n.length,o=new Uint8Array(s);for(let t=0;t<s;t+=1)o[t]=n.charCodeAt(t);i(new Blob([o],{type:e.type?e.type:"image/png"}))}))}(i);return n}class Ft extends st{static styles=r`
    :host {
      font-family: "Mulish", sans-serif;
      box-sizing: border-box;
      background-color: white;
      position: relative;
    }

    .download-btn {
      position: absolute;
      top: -4rem;
      right: 0;
      font-size: 0.8rem;
      padding: 0.3rem;
      border: 2px solid black;
      border-radius: 8px;
      background-color: white;
      cursor: pointer;
    }

    .download-btn:hover {
      box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
    }

    .download-btn:active {
      box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
        rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
    }

    .cv-container {
      padding: 1.5rem;
      display: flex;
      justify-content: center;
      width: 700px;
      aspect-ratio: 17/22;
    }

    .left-column {
      width: 75%;
      border-right: 2px solid black;
      height: 100%;
    }

    .basic-info {
      border-bottom: 2px solid black;
      padding: 1.25rem;
    }

    .right-column {
      width: 25%;
      padding: 1.25rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      font-size: 0.8rem;
    }

    .main-cat {
      font-weight: bold;
      font-size: 0.7rem;
      text-transform: uppercase;
      border: 2px solid black;
      padding: 0.25rem;
      width: fit-content;
      margin-top: 0;
    }

    .main-cat.right {
      width: 80%;
    }

    .hello {
      font-weight: 800;
      font-size: 3.25rem;
      margin: 0;
    }

    .summary {
      font-size: 0.85rem;
    }

    .summary,
    .experience-group {
      line-height: 1.6;
    }

    .experience {
      padding: 1.25rem;
    }

    .experience-group {
      position: relative;
    }

    .experience-jobs {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      gap: 1.5rem;
    }

    .experience-title {
      font-size: 1.7rem;
      border: none;
      padding-left: 0;
    }

    .job-dates {
      font-weight: bold;
      font-size: 0.6rem;
      text-transform: uppercase;
      transform: translateX(-50%) rotate(-90deg);
      position: absolute;
      text-align: center;
      top: 45%;
      left: 0.9rem;
      letter-spacing: 0.1rem;
    }

    .job-role {
      font-weight: bold;
      text-transform: uppercase;
      margin-left: 3rem;
    }

    .job-company {
      font-style: italic;
      margin-left: 3rem;
      color: #5d5a5adf;
      font-size: 0.8rem;
    }

    .job-description {
      margin-left: 3rem;
      font-size: 0.8rem;
    }

    .education-group {
      line-height: 1.6;
      padding: 1em 0 0 0;
    }

    .education-finished {
      font-weight: bold;
    }

    .skills-list {
      list-style: none;
      margin: 0;
      padding: 1rem 0 0 0;
    }

    .skill {
      line-height: 1.6rem;
    }
  `;static properties={resData:{type:Object}};constructor(){super()}render(){return M`
      <button type="button" class="download-btn" @click=${this.captureCV}>
        Download Resume
      </button>
      <div class="cv-container" id="capture">
        <div class="left-column">
          <div class="basic-info">
            <h1 class="main-cat">${this.resData.role}</h1>
            <p class="hello">Hello, I'm</p>
            <p class="hello hello-name">${this.resData.name}</p>
            <p class="summary">${this.resData.summary}</p>
          </div>
          <div class="experience">
            <h1 class="main-cat experience-title">Experience</h1>
            <div class="experience-jobs">
              ${this.resData.experience.map((t=>M`<div class="experience-group">
                    <div class="job-dates">${t.dates}</div>
                    <div class="job-role">${t.role}</div>
                    <div class="job-company">${t.company}</div>
                    <div class="job-description">${t.description}</div>
                  </div>`))}
            </div>
          </div>
        </div>
        <div class="right-column">
          <div class="contact">
            <div class="main-cat right">Contact</div>
            <div class="contact-details">
              ${Object.values(this.resData.contact).map((t=>M`<p>${t}</p>`))}
            </div>
          </div>
          <div class="education">
            <div class="main-cat right">Education</div>
            <div class="education-details">
              ${this.resData.education.map((t=>M`<div class="education-group">
                    <div class="education-finished">
                      ${t.dateFinished}
                    </div>
                    <div class="education-degree">${t.degree}</div>
                    <div class="education-school">${t.school}</div>
                  </div>`))}
            </div>
          </div>
          <div class="skills">
            <div class="main-cat right">Skills</div>
            <ul class="skills-list">
              ${this.resData.skills.map((t=>M`<li class="skill">${t}</li>`))}
            </ul>
          </div>
        </div>
      </div>
    `}captureCV(t){Vt(this.renderRoot.querySelector("#capture"),{backgroundColor:"white"}).then((function(t){window.saveAs?window.saveAs(t,"my-resume.png"):FileSaver.saveAs(t,"my-resume.png")}))}}customElements.define("build-cv",Ft);class Wt extends st{static styles=r`
    :host {
      font-family: "Mulish", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f5f6;
    }
    .body-container {
      overflow: auto;
    }
    .page-title {
      text-align: center;
      font-size: 3.75rem;
      margin: 0;
      padding: 0;
      text-shadow: 3px 3px 0px rgba(0, 0, 0, 0.2);
    }
    .main-container {
      display: flex;
      gap: 1rem;
      justify-content: space-around;
    }

    .cv-input {
      width: 40%;
    }

    .input-form {
      margin-top: 2.5rem;
      border: 2px solid black;
    }

    .cv-result {
      max-width: max-content;
    }

    .display-cv {
      margin: 1rem 1rem 1rem 0;
      width: max-content;
      height: max-content;
      box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
    }

    .display-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-right: 1rem;
    }

    .display-header button {
      width: 125px;
      height: 35px;
      border: 3px solid black;
      border-radius: 8px;
      background-color: white;
      cursor: pointer;
    }

    .display-header button:hover {
      box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 7px;
    }

    .display-header button:active {
      box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,
        rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;
    }
  `;static properties={resData:{type:Object}};constructor(){super(),this.resData={role:"Software Engineer",name:"Ichabod Crane",summary:"Frontend engineer experienced in developing modular full-stack JavaScript applications using WebComponents, React, Node, Express, RESTful APIs, and SQL databases.",experience:[{dates:"2022-Present",role:"Software Engineer",company:"Technology Company LLC",description:"Lorem ipsum dolor sit amet. At sunt tempora ea labore recusandae ab rerum mollitia non voluptatibus eligendi id quos temporibus et obcaecati dolorem. Sit odio aspernatur At amet incidunt At ullam optio nam dicta quia."},{dates:"2021",role:"Junior Web Developer",company:"Bob's Builders Online",description:"A sint labore 33 quos galisum a reiciendis excepturi aut corrupti quod aut nostrum porro. Est adipisci nihil et sapiente perferendis ut laborum commodi et voluptates enim vel reiciendis aliquam qui sequi corrupti sit quod voluptas. Non eaque pariatur est ullam nihil id exercitationem delectus est suscipit galisum eos aliquam harum."},{dates:"2020-2021",role:"Intern, Web Development",company:"Bob's Builders Online",description:"A sint labore 33 quos galisum a reiciendis excepturi aut corrupti quod aut nostrum porro. Est adipisci nihil et sapiente perferendis ut laborum commodi et voluptates enim vel reiciendis aliquam qui sequi corrupti sit quod voluptas. Non eaque pariatur est ullam nihil id exercitationem delectus est suscipit galisum eos aliquam harum."}],contact:{email:"ichabod@crane.dev",phone:"123-456-7890",site:"www.crane.dev",city:"Orlando, FL"},education:[{dateFinished:"2017",degree:"Ph.D. Philosophy",school:"UCLA"},{dateFinished:"2007",degree:"B.A. Philosophy",school:"University of Guam"}],skills:["HTML","CSS","JavaScript","Web Components","Lit","React","NodeJS","Python"]}}connectedCallback(){super.connectedCallback(),this.addEventListener("data-updated",this.handleUpdate)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("data-updated",this.handleUpdate)}handleUpdate(t){this.resData={...this.resData,[t.detail.key]:t.detail.value}}render(){return M`
      <link rel="preconnect" href="https://fonts.googleapis.com" />
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
      <link
        href="https://fonts.googleapis.com/css2?family=Mulish:wght@400;700;800&display=swap"
        rel="stylesheet"
      />
      <div class="body-container">
        <h1 class="page-title">Build a CV with Lit</h1>
        <div class="main-container">
          <div class="cv-input">
            <h1>Enter Information Below:</h1>
            <div class="input-header"></div>
            <div class="input-form">
              <cv-form .resData=${this.resData}></cv-form>
            </div>
          </div>
          <div class="cv-result">
            <div class="display-header">
              <h1>Result:</h1>
            </div>
            <div class="display-cv" id="display-cv">
              <build-cv .resData=${this.resData}></build-cv>
            </div>
          </div>
        </div>
      </div>
    `}}customElements.define("main-app",Wt)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,